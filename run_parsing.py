#!/usr/bin/env python
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon
"""
import os
import sys
import subprocess
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('run_parsing.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        import django
        import requests
        import selenium
        import psycopg2
        import beautifulsoup4
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

def run_setup_postgres():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É PostgreSQL"""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL...")
    try:
        result = subprocess.run([sys.executable, 'setup_postgres.py'], 
                              capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ PostgreSQL")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL: {e}")
        return False

def run_parsing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
    try:
        result = subprocess.run([sys.executable, 'scrape_ozon_products_postgres.py'], 
                              capture_output=True, text=True, timeout=3600)  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        if result.returncode == 0:
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False

def main():
    logger.info("=== –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –¢–û–í–ê–†–û–í –° OZON ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_requirements():
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PostgreSQL
    if not run_setup_postgres():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    if not run_parsing():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
        return False
    
    logger.info("üéâ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    return True

if __name__ == "__main__":
    main()

