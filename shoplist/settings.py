"""
Django settings for shoplist project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import environ
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api
from datetime import timedelta # Добавлен импорт timedelta
from django.utils.translation import gettext_lazy as _ # Добавлен импорт для мультиязычности

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, 'django-insecure-^ak=rxmafgif@q44fs)!s#gorll*^hw!=&wpojm074_!6@xj-x'),
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
    REDIS_URL=(str, 'redis://redis:6379/0'),
    CLOUDINARY_URL=(str, ''),
    UNSPLASH_ACCESS_KEY=(str, ''),
    EMAIL_HOST=(str, 'localhost'),
    EMAIL_PORT=(int, 1025),
    EMAIL_HOST_USER=(str, ''),
    EMAIL_HOST_PASSWORD=(str, ''),
    EMAIL_USE_TLS=(bool, False),
    EMAIL_USE_SSL=(bool, False),
    DEFAULT_FROM_EMAIL=(str, 'webmaster@localhost'),
)

# Take environment variables from .env file in docker directory
environ.Env.read_env(os.path.join(BASE_DIR, 'docker', '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
if DEBUG:
    ALLOWED_HOSTS = ['*'] # Разрешаем все хосты в режиме отладки


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'rest_framework', # Для API
    'django_filters', # Для фильтрации в API
    'parler', # Для мультиязычности
    'crispy_forms', # Для форм
    'crispy_bootstrap5', # Bootstrap 5 для crispy forms
    # 'django_admin_interface', # Улучшенный админ интерфейс - отключено
    'colorfield', # Поля для выбора цвета
    # 'django_two_factor_auth', # Двухфакторная аутентификация - отключено
    'django_ratelimit', # Ограничение скорости запросов
    # 'notifications', # Уведомления - отключено
    # 'drf_spectacular', # Swagger документация - отключено
    # 'djangorestframework_simplejwt', # JWT токены - отключено
    # 'django_redis', # Redis кэш - отключено
    # 'celery', # Асинхронные задачи - отключено
    
    # Local apps
    'products', # Добавляем наше приложение
]

AUTH_USER_MODEL = 'products.User' # Указываем кастомную модель пользователя

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # Для мультиязычности
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django_otp.middleware.OTPMiddleware', # Для 2FA - временно отключено
    'products.middleware.LocationMiddleware', # Для обработки локации пользователя
    'products.rate_limit_middleware.RateLimitMiddleware', # Для обработки rate limiting
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shoplist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'products/templates', BASE_DIR / 'two_factor/templates'], # Добавляем директорию для общих шаблонов и шаблонов 2FA
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n', # Для мультиязычности
                'products.context_processors.catalog_categories', # Категории каталога
            ],
        },
    },
]

WSGI_APPLICATION = 'shoplist.wsgi.application'

LOGIN_REDIRECT_URL = 'index' # URL для перенаправления после успешного входа
LOGOUT_REDIRECT_URL = 'index' # URL для перенаправления после успешного выхода
LOGIN_URL = 'login' # Для 2FA

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use PostgreSQL in production, SQLite in development
if env('DATABASE_URL'):
        DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'shoplist_db',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
else:
    # Настройка PostgreSQL для локальной разработки
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'shoplist_db',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12, # Минимальная длина пароля 12 символов
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru' # Изменяем на русский язык

TIME_ZONE = 'Europe/Moscow' # Изменяем часовой пояс на московский

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ('ru', _('Русский')),
    ('en', _('English')),
    ('ar', _('العربية')),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

PARLER_LANGUAGES = {
    None: (
        {'code': 'ru',},
        {'code': 'en',},
        {'code': 'ar',},
    ),
    'default': {
        'fallback': 'ru',
        'hide_untranslated': False,
    }
}

PARLER_DEFAULT_LANGUAGE_CODE = 'ru'
PARLER_ENABLE_CACHING = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Для продакшена

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Cloudinary settings for production
CLOUDINARY_URL = env('CLOUDINARY_URL')
if CLOUDINARY_URL:
    cloudinary.config(
        cloud_name=CLOUDINARY_URL.split('@')[1].split('/')[0],
        api_key=CLOUDINARY_URL.split('://')[1].split(':')[0],
        api_secret=CLOUDINARY_URL.split(':')[2].split('@')[0]
    )

# Redis settings for caching and Celery
REDIS_URL = env('REDIS_URL')

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Настройки сессий с Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Настройки кэширования для parler
PARLER_CACHE = 'default'

# Celery settings
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 12,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    }
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
}

# DRF Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'ShopList API',
    'DESCRIPTION': 'Документация API для проекта ShopList',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR', # Для использования локальных файлов Swagger UI
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_UI_DIST': 'SIDECAR', # Для использования локальных файлов Redoc UI
}

# Django Admin Interface settings
X_FRAME_OPTIONS = "SAMEORIGIN" # Для работы django-admin-interface

# Django Two Factor Auth settings
TWO_FACTOR_CALL_GATEWAY = 'two_factor.gateways.fake.Fake'
TWO_FACTOR_SMS_GATEWAY = 'two_factor.gateways.fake.Fake'
TWO_FACTOR_QR_FACTORY = 'qrcode.image.pil.PilImage'
TWO_FACTOR_TOTP_ISSUER = 'ShopList Marketplace'

# OTP settings
OTP_TOTP_ISSUER = 'ShopList Marketplace'
OTP_LOGIN_URL = 'two_factor:login'

# Django Notifications settings
NOTIFICATIONS_USE_JSONFIELD = True

# Unsplash API Key
UNSPLASH_ACCESS_KEY = env('UNSPLASH_ACCESS_KEY')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Allauth settings
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Настройки для Unsplash API
UNSPLASH_ACCESS_KEY = os.getenv('UNSPLASH_ACCESS_KEY', '')
UNSPLASH_SECRET_KEY = os.getenv('UNSPLASH_SECRET_KEY', '')
