#!/usr/bin/env python
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
"""
import os
import django
import random
from faker import Faker

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from django.db import connection
from django.contrib.auth import get_user_model

User = get_user_model()
fake = Faker('ru_RU')

def create_products():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print("üöÄ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...")
    
    with connection.cursor() as cursor:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        cursor.execute("""
            INSERT INTO products_user (username, email, first_name, last_name, is_staff, is_active, date_joined, role)
            SELECT %s, %s, %s, %s, %s, %s, NOW(), %s
            WHERE NOT EXISTS (SELECT 1 FROM products_user WHERE username = %s)
        """, ["seller", "seller@example.com", "–ü—Ä–æ–¥–∞–≤–µ—Ü", "–ú–∞–≥–∞–∑–∏–Ω", False, True, "seller", "seller"])
        
        cursor.execute("SELECT id FROM products_user WHERE username = %s", ["seller"])
        user_id = cursor.fetchone()[0]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "slug": "smartphones"},
            {"name": "–ù–æ—É—Ç–±—É–∫–∏", "slug": "laptops"},
            {"name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "slug": "appliances"},
            {"name": "–û–¥–µ–∂–¥–∞", "slug": "clothing"},
            {"name": "–û–±—É–≤—å", "slug": "shoes"},
            {"name": "–°–ø–æ—Ä—Ç", "slug": "sports"},
            {"name": "–ö–Ω–∏–≥–∏", "slug": "books"},
            {"name": "–ú–µ–±–µ–ª—å", "slug": "furniture"},
            {"name": "–ö—Ä–∞—Å–æ—Ç–∞", "slug": "beauty"},
            {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "slug": "health"},
        ]
        
        category_ids = {}
        
        for category in categories:
            cursor.execute("""
                INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
                SELECT %s, %s, %s, NOW(), NOW()
                WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
            """, [category["slug"], "tag", True, category["slug"]])
            
            cursor.execute("SELECT id FROM products_category WHERE slug = %s", [category["slug"]])
            category_id = cursor.fetchone()[0]
            category_ids[category["name"]] = category_id
            
            cursor.execute("""
                INSERT INTO products_category_translation (master_id, language_code, name, description)
                SELECT %s, %s, %s, %s
                WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
            """, [category_id, 'ru', category["name"], f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}", category_id, 'ru'])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        cursor.execute("""
            INSERT INTO products_seller (user_id, company_name, description, commission_rate, is_verified, rating, total_sales, total_revenue, created_at, updated_at)
            SELECT %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
        """, [user_id, "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω —Å —à–∏—Ä–æ–∫–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º", 5.0, True, 4.5, 0, 0.0, "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"])
        
        cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"])
        seller_id = cursor.fetchone()[0]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = [
            {"name": "iPhone 15 Pro Max 256GB", "price": 129990, "category": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã"},
            {"name": "Samsung Galaxy S24 Ultra", "price": 119990, "category": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã"},
            {"name": "Xiaomi 14 Pro", "price": 89990, "category": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã"},
            {"name": "MacBook Pro 14 M3", "price": 199990, "category": "–ù–æ—É—Ç–±—É–∫–∏"},
            {"name": "ASUS ROG Strix G15", "price": 89990, "category": "–ù–æ—É—Ç–±—É–∫–∏"},
            {"name": "Lenovo ThinkPad X1", "price": 149990, "category": "–ù–æ—É—Ç–±—É–∫–∏"},
            {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung RB37K", "price": 45990, "category": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"},
            {"name": "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ LG F2J3", "price": 32990, "category": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"},
            {"name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55 QLED", "price": 79990, "category": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"},
            {"name": "–ö—É—Ä—Ç–∫–∞ –º—É–∂—Å–∫–∞—è –∑–∏–º–Ω—è—è", "price": 15990, "category": "–û–¥–µ–∂–¥–∞"},
            {"name": "–î–∂–∏–Ω—Å—ã –º—É–∂—Å–∫–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ", "price": 4990, "category": "–û–¥–µ–∂–¥–∞"},
            {"name": "–ü–ª–∞—Ç—å–µ –∂–µ–Ω—Å–∫–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ", "price": 8990, "category": "–û–¥–µ–∂–¥–∞"},
            {"name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max", "price": 12990, "category": "–û–±—É–≤—å"},
            {"name": "–ë–æ—Ç–∏–Ω–∫–∏ –º—É–∂—Å–∫–∏–µ –∫–æ–∂–∞–Ω—ã–µ", "price": 8990, "category": "–û–±—É–≤—å"},
            {"name": "–¢—É—Ñ–ª–∏ –∂–µ–Ω—Å–∫–∏–µ –Ω–∞ –∫–∞–±–ª—É–∫–µ", "price": 6990, "category": "–û–±—É–≤—å"},
            {"name": "–ì–∞–Ω—Ç–µ–ª–∏ —Ä–∞–∑–±–æ—Ä–Ω—ã–µ 20–∫–≥", "price": 4990, "category": "–°–ø–æ—Ä—Ç"},
            {"name": "–ö–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏", "price": 1990, "category": "–°–ø–æ—Ä—Ç"},
            {"name": "–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ä–Ω—ã–π", "price": 25990, "category": "–°–ø–æ—Ä—Ç"},
            {"name": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä –õ.–ù. –¢–æ–ª—Å—Ç–æ–π", "price": 890, "category": "–ö–Ω–∏–≥–∏"},
            {"name": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å", "price": 1290, "category": "–ö–Ω–∏–≥–∏"},
            {"name": "–î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π", "price": 45990, "category": "–ú–µ–±–µ–ª—å"},
            {"name": "–°—Ç–æ–ª –æ–±–µ–¥–µ–Ω–Ω—ã–π", "price": 19990, "category": "–ú–µ–±–µ–ª—å"},
            {"name": "–°—Ç—É–ª –æ—Ñ–∏—Å–Ω—ã–π", "price": 8990, "category": "–ú–µ–±–µ–ª—å"},
            {"name": "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ La Mer", "price": 45990, "category": "–ö—Ä–∞—Å–æ—Ç–∞"},
            {"name": "–ü–∞—Ä—Ñ—é–º Chanel ‚Ññ5", "price": 12990, "category": "–ö—Ä–∞—Å–æ—Ç–∞"},
            {"name": "–í–∏—Ç–∞–º–∏–Ω—ã Centrum", "price": 1990, "category": "–ó–¥–æ—Ä–æ–≤—å–µ"},
            {"name": "–¢–æ–Ω–æ–º–µ—Ç—Ä Omron M3", "price": 3990, "category": "–ó–¥–æ—Ä–æ–≤—å–µ"},
            {"name": "–ì–ª—é–∫–æ–º–µ—Ç—Ä", "price": 2990, "category": "–ó–¥–æ—Ä–æ–≤—å–µ"},
        ]
        
        saved_count = 0
        
        for product_data in products:
            try:
                name = product_data['name']
                price = product_data['price']
                category_name = product_data['category']
                category_id = category_ids[category_name]
                sku = f"PROD-{fake.unique.random_number(digits=6)}"
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(5, 100), True, round(random.uniform(4.0, 5.0), 2), random.randint(0, 50), random.randint(20, 300)])
                
                product_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä {name}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π."])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

if __name__ == '__main__':
    create_products()

