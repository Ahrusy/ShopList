#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å OZON
"""
import os
import django
import requests
import time
import random
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import json
from decimal import Decimal
from faker import Faker

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from products.models import Product, Category, Shop, Tag, Seller, ProductImage, ProductCharacteristic
from django.db import connection

fake = Faker('ru_RU')

class OzonScraper:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        self.base_url = 'https://www.ozon.ru'
        self.scraped_count = 0
        self.target_count = 500
        
    def get_page(self, url, retries=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(retries):
            try:
                response = self.session.get(url, timeout=10)
                response.raise_for_status()
                return response
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < retries - 1:
                    time.sleep(random.uniform(2, 5))
                else:
                    return None
    
    def parse_product_page(self, product_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        try:
            response = self.get_page(product_url)
            if not response:
                return None
                
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            product_data = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            title_elem = soup.find('h1') or soup.find('title')
            if title_elem:
                product_data['name'] = title_elem.get_text().strip()
            
            # –¶–µ–Ω–∞
            price_elem = soup.find('span', {'data-widget': 'webPrice'}) or soup.find('span', class_='price')
            if price_elem:
                price_text = price_elem.get_text().strip()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ü–µ–Ω—ã
                import re
                price_match = re.search(r'[\d\s]+', price_text.replace(' ', ''))
                if price_match:
                    product_data['price'] = int(price_match.group().replace(' ', ''))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_elem = soup.find('div', {'data-widget': 'webCharacteristics'}) or soup.find('div', class_='description')
            if desc_elem:
                product_data['description'] = desc_elem.get_text().strip()[:500]
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            img_elements = soup.find_all('img', {'data-widget': 'webGallery'}) or soup.find_all('img', class_='gallery')
            for img in img_elements[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                src = img.get('src') or img.get('data-src')
                if src:
                    if src.startswith('//'):
                        src = 'https:' + src
                    elif src.startswith('/'):
                        src = self.base_url + src
                    images.append(src)
            
            product_data['images'] = images
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics = {}
            char_elements = soup.find_all('div', class_='characteristic') or soup.find_all('tr')
            for char in char_elements:
                key_elem = char.find('span', class_='key') or char.find('td', class_='key')
                value_elem = char.find('span', class_='value') or char.find('td', class_='value')
                if key_elem and value_elem:
                    key = key_elem.get_text().strip()
                    value = value_elem.get_text().strip()
                    if key and value:
                        characteristics[key] = value
            
            product_data['characteristics'] = characteristics
            
            return product_data
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞ {product_url}: {e}")
            return None
    
    def get_category_products(self, category_url, max_products=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            response = self.get_page(category_url)
            if not response:
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            products = []
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
            product_links = []
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
            selectors = [
                'a[href*="/product/"]',
                'a[href*="/goods/"]',
                '.product-card a',
                '.tile-root a',
                'a[data-widget="searchResultsV2"]'
            ]
            
            for selector in selectors:
                links = soup.select(selector)
                for link in links:
                    href = link.get('href')
                    if href and '/product/' in href:
                        if href.startswith('/'):
                            href = self.base_url + href
                        product_links.append(href)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            product_links = list(set(product_links))
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(product_links)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            for i, product_url in enumerate(product_links[:max_products]):
                if self.scraped_count >= self.target_count:
                    break
                    
                print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ {self.scraped_count + 1}/{self.target_count}: {product_url}")
                
                product_data = self.parse_product_page(product_url)
                if product_data:
                    products.append(product_data)
                    self.scraped_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(random.uniform(1, 3))
            
            return products
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_url}: {e}")
            return []
    
    def scrape_products(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å OZON...")
        
        # URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        categories = [
            'https://www.ozon.ru/category/smartfony-15502/',
            'https://www.ozon.ru/category/noutbuki-15687/',
            'https://www.ozon.ru/category/odezhda-muzhskaya-7502/',
            'https://www.ozon.ru/category/odezhda-zhenskaya-7501/',
            'https://www.ozon.ru/category/obuv-muzhskaya-7503/',
            'https://www.ozon.ru/category/obuv-zhenskaya-7504/',
            'https://www.ozon.ru/category/bytovaya-tehnika-10500/',
            'https://www.ozon.ru/category/krasota-i-zdorove-7500/',
            'https://www.ozon.ru/category/sport-i-otdyh-7505/',
            'https://www.ozon.ru/category/knigi-15500/',
        ]
        
        all_products = []
        
        for category_url in categories:
            if self.scraped_count >= self.target_count:
                break
                
            print(f"\nüìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_url}")
            products = self.get_category_products(category_url, max_products=50)
            all_products.extend(products)
            
            print(f"–°–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.scraped_count}/{self.target_count}")
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        return all_products

def save_products_to_db(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        saved_count = 0
        
        for product_data in products:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
                cursor.execute("""
                    INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
                    SELECT %s, %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
                """, ["parsed-products", "tag", True, "parsed-products"])
                
                cursor.execute("SELECT id FROM products_category WHERE slug = %s", ["parsed-products"])
                category_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_category_translation (master_id, language_code, name, description)
                    SELECT %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
                """, [category_id, 'ru', "–ü–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–¢–æ–≤–∞—Ä—ã, —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Å OZON", category_id, 'ru'])
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                cursor.execute("""
                    INSERT INTO products_seller (company_name, description, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
                """, ["OZON –ü–∞—Ä—Å–µ—Ä", "–¢–æ–≤–∞—Ä—ã —Å OZON", "OZON –ü–∞—Ä—Å–µ—Ä"])
                
                cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["OZON –ü–∞—Ä—Å–µ—Ä"])
                seller_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                name = product_data.get('name', '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                price = product_data.get('price', 1000)
                description = product_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                sku = f"OZON-{fake.unique.random_number(digits=6)}"
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(10, 100), True, round(random.uniform(3.5, 5.0), 2), random.randint(0, 50), random.randint(50, 500)])
                
                product_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, description])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                characteristics = product_data.get('characteristics', {})
                for char_name, char_value in list(characteristics.items())[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    cursor.execute("""
                        INSERT INTO products_productcharacteristic (product_id, name, value, unit, "order")
                        VALUES (%s, %s, %s, %s, %s)
                    """, [product_id, char_name, char_value, "—à—Ç", 1])
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
                cursor.execute("""
                    INSERT INTO products_shop (phone, email, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop WHERE phone = %s)
                """, ["+7 (495) 232-32-32", "store@ozon.ru", "+7 (495) 232-32-32"])
                
                cursor.execute("SELECT id FROM products_shop WHERE phone = %s", ["+7 (495) 232-32-32"])
                shop_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_shop_translation (master_id, language_code, name, address, city)
                    SELECT %s, %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop_translation WHERE master_id = %s AND language_code = %s)
                """, [shop_id, 'ru', "OZON Store", "–ú–æ—Å–∫–≤–∞, —É–ª. –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ, 16", "–ú–æ—Å–∫–≤–∞", shop_id, 'ru'])
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
                cursor.execute("""
                    INSERT INTO products_product_shops (product_id, shop_id)
                    SELECT %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_product_shops WHERE product_id = %s AND shop_id = %s)
                """, [product_id, shop_id, product_id, shop_id])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        return saved_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = OzonScraper()
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    products = scraper.scrape_products()
    
    if products:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_products_to_db(products)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

if __name__ == '__main__':
    main()