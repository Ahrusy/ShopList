#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω
"""
import os
import django
import requests
import time
import random
from bs4 import BeautifulSoup
import json
from decimal import Decimal
from faker import Faker
import re

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from products.models import Product, Category, Shop, Tag, Seller, ProductImage, ProductCharacteristic
from django.db import connection

fake = Faker('ru_RU')

class SantehnikaOnlineScraper:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        self.base_url = 'https://santehnika-online.ru'
        self.scraped_count = 0
        self.target_count = 500
        
    def get_page(self, url, retries=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(retries):
            try:
                response = self.session.get(url, timeout=15)
                response.raise_for_status()
                return response
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < retries - 1:
                    time.sleep(random.uniform(2, 4))
                else:
                    return None
    
    def parse_category_page(self, category_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            response = self.get_page(category_url)
            if not response:
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            products = []
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_cards = soup.find_all('div', class_='product-item') or soup.find_all('div', class_='product-card')
            
            if not product_cards:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                product_cards = soup.find_all('div', class_='item') or soup.find_all('article', class_='product')
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
            
            for card in product_cards[:30]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 —Ç–æ–≤–∞—Ä–æ–≤
                try:
                    product_data = {}
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = card.find('a', class_='product-name') or card.find('h3') or card.find('a', class_='name')
                    if name_elem:
                        product_data['name'] = name_elem.get_text().strip()
                    
                    # –¶–µ–Ω–∞
                    price_elem = card.find('span', class_='price') or card.find('div', class_='price') or card.find('span', class_='cost')
                    if price_elem:
                        price_text = price_elem.get_text().strip()
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ü–µ–Ω—ã
                        price_match = re.search(r'[\d\s]+', price_text.replace(' ', ''))
                        if price_match:
                            product_data['price'] = int(price_match.group().replace(' ', ''))
                    
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                    link_elem = card.find('a', class_='product-link') or card.find('a')
                    if link_elem:
                        href = link_elem.get('href')
                        if href:
                            if href.startswith('/'):
                                href = self.base_url + href
                            product_data['url'] = href
                    
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_elem = card.find('img', class_='product-image') or card.find('img')
                    if img_elem:
                        src = img_elem.get('src') or img_elem.get('data-src')
                        if src:
                            if src.startswith('//'):
                                src = 'https:' + src
                            elif src.startswith('/'):
                                src = self.base_url + src
                            product_data['image'] = src
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ
                    desc_elem = card.find('div', class_='description') or card.find('p', class_='desc')
                    if desc_elem:
                        product_data['description'] = desc_elem.get_text().strip()[:300]
                    
                    if product_data.get('name') and product_data.get('price'):
                        products.append(product_data)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    continue
            
            return products
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_url}: {e}")
            return []
    
    def parse_product_detail(self, product_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        try:
            response = self.get_page(product_url)
            if not response:
                return {}
            
            soup = BeautifulSoup(response.content, 'html.parser')
            details = {}
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics = {}
            char_elements = soup.find_all('tr', class_='characteristic') or soup.find_all('div', class_='spec')
            
            for char in char_elements:
                key_elem = char.find('td', class_='name') or char.find('span', class_='name')
                value_elem = char.find('td', class_='value') or char.find('span', class_='value')
                if key_elem and value_elem:
                    key = key_elem.get_text().strip()
                    value = value_elem.get_text().strip()
                    if key and value:
                        characteristics[key] = value
            
            details['characteristics'] = characteristics
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            img_elements = soup.find_all('img', class_='product-image') or soup.find_all('img', class_='gallery')
            for img in img_elements[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                src = img.get('src') or img.get('data-src')
                if src:
                    if src.startswith('//'):
                        src = 'https:' + src
                    elif src.startswith('/'):
                        src = self.base_url + src
                    images.append(src)
            
            details['images'] = images
            
            return details
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞ {product_url}: {e}")
            return {}
    
    def scrape_products(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω...")
        
        # URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        categories = [
            'https://santehnika-online.ru/catalog/rakoviny/',
            'https://santehnika-online.ru/catalog/unitazy/',
            'https://santehnika-online.ru/catalog/vanny/',
            'https://santehnika-online.ru/catalog/dushi/',
            'https://santehnika-online.ru/catalog/moyki/',
            'https://santehnika-online.ru/catalog/smesiteli/',
            'https://santehnika-online.ru/catalog/truby/',
            'https://santehnika-online.ru/catalog/fitingi/',
            'https://santehnika-online.ru/catalog/armatura/',
            'https://santehnika-online.ru/catalog/otoplenie/',
            'https://santehnika-online.ru/catalog/elektrika/',
            'https://santehnika-online.ru/catalog/plitka/',
            'https://santehnika-online.ru/catalog/klei/',
            'https://santehnika-online.ru/catalog/instrumenty/',
            'https://santehnika-online.ru/catalog/aksessuary/',
        ]
        
        all_products = []
        
        for category_url in categories:
            if self.scraped_count >= self.target_count:
                break
                
            print(f"\nüìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_url}")
            products = self.parse_category_page(category_url)
            
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for product in products:
                if self.scraped_count >= self.target_count:
                    break
                    
                if product.get('url'):
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞: {product['name']}")
                    details = self.parse_product_detail(product['url'])
                    product.update(details)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(random.uniform(1, 2))
            
            all_products.extend(products)
            self.scraped_count = len(all_products)
            
            print(f"–°–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.scraped_count}/{self.target_count}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            time.sleep(random.uniform(2, 4))
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        return all_products

def save_products_to_db(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        saved_count = 0
        
        for product_data in products:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞"
                cursor.execute("""
                    INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
                    SELECT %s, %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
                """, ["santehnika", "wrench", True, "santehnika"])
                
                cursor.execute("SELECT id FROM products_category WHERE slug = %s", ["santehnika"])
                category_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_category_translation (master_id, language_code, name, description)
                    SELECT %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
                """, [category_id, 'ru', "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–¢–æ–≤–∞—Ä—ã –¥–ª—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Ä–µ–º–æ–Ω—Ç–∞", category_id, 'ru'])
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                cursor.execute("""
                    INSERT INTO products_seller (company_name, description, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
                """, ["–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏", "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω"])
                
                cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω"])
                seller_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                name = product_data.get('name', '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                price = product_data.get('price', 1000)
                description = product_data.get('description', f"–¢–æ–≤–∞—Ä —Å–ø–∞—Ä—Å–µ–Ω —Å —Å–∞–π—Ç–∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω. {name}")
                sku = f"ST-{fake.unique.random_number(digits=6)}"
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(5, 50), True, round(random.uniform(4.0, 5.0), 2), random.randint(0, 30), random.randint(20, 200)])
                
                product_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, description])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                characteristics = product_data.get('characteristics', {})
                char_count = 0
                for char_name, char_value in characteristics.items():
                    if char_count >= 8:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                        break
                    cursor.execute("""
                        INSERT INTO products_productcharacteristic (product_id, name, value, unit, "order")
                        VALUES (%s, %s, %s, %s, %s)
                    """, [product_id, char_name, char_value, "—à—Ç", char_count + 1])
                    char_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                standard_chars = [
                    ("–ò—Å—Ç–æ—á–Ω–∏–∫", "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω"),
                    ("–¢–∏–ø", "–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"),
                    ("–°—Ç–∞—Ç—É—Å", "–í –Ω–∞–ª–∏—á–∏–∏"),
                    ("–î–æ—Å—Ç–∞–≤–∫–∞", "–î–æ—Å—Ç—É–ø–Ω–∞"),
                ]
                
                for char_name, char_value in standard_chars:
                    cursor.execute("""
                        INSERT INTO products_productcharacteristic (product_id, name, value, unit, "order")
                        VALUES (%s, %s, %s, %s, %s)
                    """, [product_id, char_name, char_value, "—à—Ç", char_count + 1])
                    char_count += 1
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
                cursor.execute("""
                    INSERT INTO products_shop (phone, email, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop WHERE phone = %s)
                """, ["+7 (495) 123-45-67", "info@santehnika-online.ru", "+7 (495) 123-45-67"])
                
                cursor.execute("SELECT id FROM products_shop WHERE phone = %s", ["+7 (495) 123-45-67"])
                shop_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_shop_translation (master_id, language_code, name, address, city)
                    SELECT %s, %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop_translation WHERE master_id = %s AND language_code = %s)
                """, [shop_id, 'ru', "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω", "–ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 1", "–ú–æ—Å–∫–≤–∞", shop_id, 'ru'])
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
                cursor.execute("""
                    INSERT INTO products_product_shops (product_id, shop_id)
                    SELECT %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_product_shops WHERE product_id = %s AND shop_id = %s)
                """, [product_id, shop_id, product_id, shop_id])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        return saved_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = SantehnikaOnlineScraper()
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    products = scraper.scrape_products()
    
    if products:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_products_to_db(products)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

if __name__ == '__main__':
    main()
