#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries
"""
import os
import django
import requests
import time
import random
from bs4 import BeautifulSoup
import json
from decimal import Decimal
from faker import Faker
import re

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from products.models import Product, Category, Shop, Tag, Seller, ProductImage, ProductCharacteristic
from django.db import connection

fake = Faker('ru_RU')

class WildberriesScraper:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        self.base_url = 'https://www.wildberries.ru'
        self.scraped_count = 0
        self.target_count = 500
        
    def get_page(self, url, retries=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(retries):
            try:
                response = self.session.get(url, timeout=15)
                response.raise_for_status()
                return response
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < retries - 1:
                    time.sleep(random.uniform(3, 6))
                else:
                    return None
    
    def parse_search_results(self, search_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            response = self.get_page(search_url)
            if not response:
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            products = []
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_cards = soup.find_all('div', class_='product-card') or soup.find_all('article', class_='product-card')
            
            if not product_cards:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                product_cards = soup.find_all('div', {'data-testid': 'product-card'}) or soup.find_all('div', class_='card-product')
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
            
            for card in product_cards[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ç–æ–≤–∞—Ä–æ–≤
                try:
                    product_data = {}
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = card.find('span', class_='product-card__name') or card.find('h3') or card.find('a', class_='product-card__name')
                    if name_elem:
                        product_data['name'] = name_elem.get_text().strip()
                    
                    # –¶–µ–Ω–∞
                    price_elem = card.find('span', class_='price') or card.find('ins', class_='price') or card.find('span', class_='price__lower-price')
                    if price_elem:
                        price_text = price_elem.get_text().strip()
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ü–µ–Ω—ã
                        price_match = re.search(r'[\d\s]+', price_text.replace(' ', ''))
                        if price_match:
                            product_data['price'] = int(price_match.group().replace(' ', ''))
                    
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                    link_elem = card.find('a', class_='product-card__link') or card.find('a')
                    if link_elem:
                        href = link_elem.get('href')
                        if href:
                            if href.startswith('/'):
                                href = self.base_url + href
                            product_data['url'] = href
                    
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_elem = card.find('img', class_='product-card__img') or card.find('img')
                    if img_elem:
                        src = img_elem.get('src') or img_elem.get('data-src')
                        if src:
                            if src.startswith('//'):
                                src = 'https:' + src
                            elif src.startswith('/'):
                                src = self.base_url + src
                            product_data['image'] = src
                    
                    # –†–µ–π—Ç–∏–Ω–≥
                    rating_elem = card.find('span', class_='product-card__rating') or card.find('div', class_='rating')
                    if rating_elem:
                        rating_text = rating_elem.get_text().strip()
                        rating_match = re.search(r'[\d,]+', rating_text)
                        if rating_match:
                            product_data['rating'] = float(rating_match.group().replace(',', '.'))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    reviews_elem = card.find('span', class_='product-card__review') or card.find('div', class_='review')
                    if reviews_elem:
                        reviews_text = reviews_elem.get_text().strip()
                        reviews_match = re.search(r'[\d]+', reviews_text)
                        if reviews_match:
                            product_data['reviews_count'] = int(reviews_match.group())
                    
                    if product_data.get('name') and product_data.get('price'):
                        products.append(product_data)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    continue
            
            return products
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ {search_url}: {e}")
            return []
    
    def scrape_products(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries...")
        
        # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        search_queries = [
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            '–Ω–æ—É—Ç–±—É–∫',
            '–æ–¥–µ–∂–¥–∞ –º—É–∂—Å–∫–∞—è',
            '–æ–¥–µ–∂–¥–∞ –∂–µ–Ω—Å–∫–∞—è',
            '–æ–±—É–≤—å –º—É–∂—Å–∫–∞—è',
            '–æ–±—É–≤—å –∂–µ–Ω—Å–∫–∞—è',
            '–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–∫—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
            '—Å–ø–æ—Ä—Ç',
            '–∫–Ω–∏–≥–∏',
            '–∏–≥—Ä—É—à–∫–∏',
            '–¥–æ–º –∏ —Å–∞–¥',
            '–∞–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
            '–∑–æ–æ—Ç–æ–≤–∞—Ä—ã',
            '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã',
            '–ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
            '—é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
            '—á–∞—Å—ã',
            '—Å—É–º–∫–∏',
            '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            '–º–µ–±–µ–ª—å',
            '–æ—Å–≤–µ—â–µ–Ω–∏–µ',
            '—Ç–µ–∫—Å—Ç–∏–ª—å',
            '–ø–æ—Å—É–¥–∞',
            '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
        ]
        
        all_products = []
        
        for query in search_queries:
            if self.scraped_count >= self.target_count:
                break
                
            search_url = f"{self.base_url}/catalog/0/search.aspx?search={query}"
            print(f"\nüîç –ü–æ–∏—Å–∫: {query}")
            
            products = self.parse_search_results(search_url)
            all_products.extend(products)
            self.scraped_count = len(all_products)
            
            print(f"–°–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.scraped_count}/{self.target_count}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(random.uniform(2, 4))
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        return all_products

def save_products_to_db(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        saved_count = 0
        
        for product_data in products:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
                cursor.execute("""
                    INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
                    SELECT %s, %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
                """, ["parsed-products", "tag", True, "parsed-products"])
                
                cursor.execute("SELECT id FROM products_category WHERE slug = %s", ["parsed-products"])
                category_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_category_translation (master_id, language_code, name, description)
                    SELECT %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
                """, [category_id, 'ru', "–ü–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–¢–æ–≤–∞—Ä—ã, —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Å Wildberries", category_id, 'ru'])
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                cursor.execute("""
                    INSERT INTO products_seller (company_name, description, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
                """, ["Wildberries –ü–∞—Ä—Å–µ—Ä", "–¢–æ–≤–∞—Ä—ã —Å Wildberries", "Wildberries –ü–∞—Ä—Å–µ—Ä"])
                
                cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["Wildberries –ü–∞—Ä—Å–µ—Ä"])
                seller_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                name = product_data.get('name', '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                price = product_data.get('price', 1000)
                description = f"–¢–æ–≤–∞—Ä —Å–ø–∞—Ä—Å–µ–Ω —Å Wildberries. {name}"
                sku = f"WB-{fake.unique.random_number(digits=6)}"
                rating = product_data.get('rating', round(random.uniform(3.5, 5.0), 2))
                reviews_count = product_data.get('reviews_count', random.randint(0, 50))
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(10, 100), True, rating, reviews_count, random.randint(50, 500)])
                
                product_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, description])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                characteristics = [
                    ("–ò—Å—Ç–æ—á–Ω–∏–∫", "Wildberries"),
                    ("–¢–∏–ø", "–ü–∞—Ä—Å–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"),
                    ("–°—Ç–∞—Ç—É—Å", "–í –Ω–∞–ª–∏—á–∏–∏"),
                    ("–î–æ—Å—Ç–∞–≤–∫–∞", "–î–æ—Å—Ç—É–ø–Ω–∞"),
                    ("–ì–∞—Ä–∞–Ω—Ç–∏—è", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"),
                ]
                
                for i, (char_name, char_value) in enumerate(characteristics):
                    cursor.execute("""
                        INSERT INTO products_productcharacteristic (product_id, name, value, unit, "order")
                        VALUES (%s, %s, %s, %s, %s)
                    """, [product_id, char_name, char_value, "—à—Ç", i + 1])
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
                cursor.execute("""
                    INSERT INTO products_shop (phone, email, created_at, updated_at)
                    SELECT %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop WHERE phone = %s)
                """, ["+7 (495) 232-32-32", "store@wildberries.ru", "+7 (495) 232-32-32"])
                
                cursor.execute("SELECT id FROM products_shop WHERE phone = %s", ["+7 (495) 232-32-32"])
                shop_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_shop_translation (master_id, language_code, name, address, city)
                    SELECT %s, %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_shop_translation WHERE master_id = %s AND language_code = %s)
                """, [shop_id, 'ru', "Wildberries Store", "–ú–æ—Å–∫–≤–∞, —É–ª. –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ, 16", "–ú–æ—Å–∫–≤–∞", shop_id, 'ru'])
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
                cursor.execute("""
                    INSERT INTO products_product_shops (product_id, shop_id)
                    SELECT %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_product_shops WHERE product_id = %s AND shop_id = %s)
                """, [product_id, shop_id, product_id, shop_id])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        return saved_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scraper = WildberriesScraper()
    
    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    products = scraper.scrape_products()
    
    if products:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_products_to_db(products)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

if __name__ == '__main__':
    main()
