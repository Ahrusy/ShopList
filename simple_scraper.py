#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω
"""
import os
import django
import requests
import time
import random
from bs4 import BeautifulSoup
import re

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from django.db import connection
from faker import Faker

fake = Faker('ru_RU')

def scrape_santehnika():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω...")
    
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
    })
    
    base_url = 'https://santehnika-online.ru'
    categories = [
        'https://santehnika-online.ru/catalog/rakoviny/',
        'https://santehnika-online.ru/catalog/unitazy/',
        'https://santehnika-online.ru/catalog/vanny/',
        'https://santehnika-online.ru/catalog/dushi/',
        'https://santehnika-online.ru/catalog/moyki/',
        'https://santehnika-online.ru/catalog/smesiteli/',
    ]
    
    all_products = []
    
    for category_url in categories:
        try:
            print(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_url}")
            response = session.get(category_url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_cards = soup.find_all('div', class_='product-item') or soup.find_all('div', class_='product-card')
            
            if not product_cards:
                product_cards = soup.find_all('div', class_='item') or soup.find_all('article', class_='product')
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
            
            for card in product_cards[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ç–æ–≤–∞—Ä–æ–≤
                try:
                    product_data = {}
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = card.find('a', class_='product-name') or card.find('h3') or card.find('a', class_='name')
                    if name_elem:
                        product_data['name'] = name_elem.get_text().strip()
                    
                    # –¶–µ–Ω–∞
                    price_elem = card.find('span', class_='price') or card.find('div', class_='price') or card.find('span', class_='cost')
                    if price_elem:
                        price_text = price_elem.get_text().strip()
                        price_match = re.search(r'[\d\s]+', price_text.replace(' ', ''))
                        if price_match:
                            product_data['price'] = int(price_match.group().replace(' ', ''))
                    
                    if product_data.get('name') and product_data.get('price'):
                        all_products.append(product_data)
                        print(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product_data['name']} - {product_data['price']} ‚ÇΩ")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                    continue
            
            time.sleep(random.uniform(2, 4))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_url}: {e}")
            continue
    
    print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    return all_products

def save_to_db(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cursor.execute("""
            INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
            SELECT %s, %s, %s, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
        """, ["santehnika", "wrench", True, "santehnika"])
        
        cursor.execute("SELECT id FROM products_category WHERE slug = %s", ["santehnika"])
        category_id = cursor.fetchone()[0]
        
        cursor.execute("""
            INSERT INTO products_category_translation (master_id, language_code, name, description)
            SELECT %s, %s, %s, %s
            WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
        """, [category_id, 'ru', "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–¢–æ–≤–∞—Ä—ã –¥–ª—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏", category_id, 'ru'])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        cursor.execute("""
            INSERT INTO products_seller (company_name, description, commission_rate, is_verified, rating, total_sales, total_revenue, created_at, updated_at)
            SELECT %s, %s, %s, %s, %s, %s, %s, NOW(), NOW()
            WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
        """, ["–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏", 5.0, True, 4.5, 0, 0.0, "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω"])
        
        cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –û–Ω–ª–∞–π–Ω"])
        seller_id = cursor.fetchone()[0]
        
        saved_count = 0
        
        for product_data in products:
            try:
                name = product_data['name']
                price = product_data['price']
                sku = f"ST-{fake.unique.random_number(digits=6)}"
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(5, 50), True, round(random.uniform(4.0, 5.0), 2), random.randint(0, 30), random.randint(20, 200)])
                
                product_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, f"–¢–æ–≤–∞—Ä —Å–ø–∞—Ä—Å–µ–Ω —Å —Å–∞–π—Ç–∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –æ–Ω–ª–∞–π–Ω. {name}"])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    products = scrape_santehnika()
    
    if products:
        save_to_db(products)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

if __name__ == '__main__':
    main()

