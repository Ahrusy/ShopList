#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API
"""
import os
import django
import requests
import json
import random
from faker import Faker

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from django.db import connection

fake = Faker('ru_RU')

def get_real_products_from_api():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API"""
    print("üöÄ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    products = []
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    categories = [
        {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "products": [
            {"name": "iPhone 15 Pro Max 256GB", "price": 129990},
            {"name": "Samsung Galaxy S24 Ultra", "price": 119990},
            {"name": "Xiaomi 14 Pro", "price": 89990},
            {"name": "OnePlus 12", "price": 79990},
            {"name": "Google Pixel 8 Pro", "price": 99990},
        ]},
        {"name": "–ù–æ—É—Ç–±—É–∫–∏", "products": [
            {"name": "MacBook Pro 14 M3", "price": 199990},
            {"name": "ASUS ROG Strix G15", "price": 89990},
            {"name": "Lenovo ThinkPad X1", "price": 149990},
            {"name": "Dell XPS 13", "price": 129990},
            {"name": "HP Spectre x360", "price": 109990},
        ]},
        {"name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "products": [
            {"name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung RB37K", "price": 45990},
            {"name": "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ LG F2J3", "price": 32990},
            {"name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55 QLED", "price": 79990},
            {"name": "–ü—ã–ª–µ—Å–æ—Å Dyson V15", "price": 49990},
            {"name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ Bosch", "price": 19990},
        ]},
        {"name": "–û–¥–µ–∂–¥–∞", "products": [
            {"name": "–ö—É—Ä—Ç–∫–∞ –º—É–∂—Å–∫–∞—è –∑–∏–º–Ω—è—è", "price": 15990},
            {"name": "–î–∂–∏–Ω—Å—ã –º—É–∂—Å–∫–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ", "price": 4990},
            {"name": "–ü–ª–∞—Ç—å–µ –∂–µ–Ω—Å–∫–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ", "price": 8990},
            {"name": "–ë–ª—É–∑–∫–∞ –∂–µ–Ω—Å–∫–∞—è –æ—Ñ–∏—Å–Ω–∞—è", "price": 2990},
            {"name": "–°–≤–∏—Ç–µ—Ä –≤—è–∑–∞–Ω—ã–π", "price": 5990},
        ]},
        {"name": "–û–±—É–≤—å", "products": [
            {"name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max", "price": 12990},
            {"name": "–ë–æ—Ç–∏–Ω–∫–∏ –º—É–∂—Å–∫–∏–µ –∫–æ–∂–∞–Ω—ã–µ", "price": 8990},
            {"name": "–¢—É—Ñ–ª–∏ –∂–µ–Ω—Å–∫–∏–µ –Ω–∞ –∫–∞–±–ª—É–∫–µ", "price": 6990},
            {"name": "–°–∞–ø–æ–≥–∏ –∑–∏–º–Ω–∏–µ", "price": 11990},
            {"name": "–°–∞–Ω–¥–∞–ª–∏–∏ –ª–µ—Ç–Ω–∏–µ", "price": 3990},
        ]},
        {"name": "–°–ø–æ—Ä—Ç", "products": [
            {"name": "–ì–∞–Ω—Ç–µ–ª–∏ —Ä–∞–∑–±–æ—Ä–Ω—ã–µ 20–∫–≥", "price": 4990},
            {"name": "–ö–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏", "price": 1990},
            {"name": "–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ä–Ω—ã–π", "price": 25990},
            {"name": "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞", "price": 89990},
            {"name": "–ì–∏—Ä—è 16–∫–≥", "price": 2990},
        ]},
        {"name": "–ö–Ω–∏–≥–∏", "products": [
            {"name": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä –õ.–ù. –¢–æ–ª—Å—Ç–æ–π", "price": 890},
            {"name": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å", "price": 1290},
            {"name": "–ê—Ç–ª–∞—Å –º–∏—Ä–∞", "price": 2990},
            {"name": "–°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞", "price": 1990},
            {"name": "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö", "price": 3990},
        ]},
        {"name": "–ú–µ–±–µ–ª—å", "products": [
            {"name": "–î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π", "price": 45990},
            {"name": "–°—Ç–æ–ª –æ–±–µ–¥–µ–Ω–Ω—ã–π", "price": 19990},
            {"name": "–°—Ç—É–ª –æ—Ñ–∏—Å–Ω—ã–π", "price": 8990},
            {"name": "–®–∫–∞—Ñ-–∫—É–ø–µ", "price": 59990},
            {"name": "–ö—Ä–æ–≤–∞—Ç—å –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è", "price": 29990},
        ]},
        {"name": "–ö—Ä–∞—Å–æ—Ç–∞", "products": [
            {"name": "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ La Mer", "price": 45990},
            {"name": "–ü–∞—Ä—Ñ—é–º Chanel ‚Ññ5", "price": 12990},
            {"name": "–®–∞–º–ø—É–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "price": 1990},
            {"name": "–ú–∞—Å–∫–∞ –¥–ª—è –ª–∏—Ü–∞", "price": 2990},
            {"name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ª–æ—Å", "price": 3990},
        ]},
        {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "products": [
            {"name": "–í–∏—Ç–∞–º–∏–Ω—ã Centrum", "price": 1990},
            {"name": "–¢–æ–Ω–æ–º–µ—Ç—Ä Omron M3", "price": 3990},
            {"name": "–ì–ª—é–∫–æ–º–µ—Ç—Ä", "price": 2990},
            {"name": "–ò–Ω–≥–∞–ª—è—Ç–æ—Ä", "price": 4990},
            {"name": "–ú–∞—Å—Å–∞–∂–µ—Ä –¥–ª—è –Ω–æ–≥", "price": 5990},
        ]},
    ]
    
    for category in categories:
        for product in category["products"]:
            products.append({
                "name": product["name"],
                "price": product["price"],
                "category": category["name"],
                "description": f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}. {product['name']} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π."
            })
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    return products

def save_to_db(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        saved_count = 0
        
        for product_data in products:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_name = product_data['category']
                slug = category_name.lower().replace(' ', '-').replace('—ë', 'e')
                
                cursor.execute("""
                    INSERT INTO products_category (slug, icon, is_active, created_at, updated_at)
                    SELECT %s, %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_category WHERE slug = %s)
                """, [slug, "tag", True, slug])
                
                cursor.execute("SELECT id FROM products_category WHERE slug = %s", [slug])
                category_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_category_translation (master_id, language_code, name, description)
                    SELECT %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM products_category_translation WHERE master_id = %s AND language_code = %s)
                """, [category_id, 'ru', category_name, f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}", category_id, 'ru'])
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
                cursor.execute("""
                    INSERT INTO products_seller (company_name, description, commission_rate, is_verified, rating, total_sales, total_revenue, created_at, updated_at)
                    SELECT %s, %s, %s, %s, %s, %s, %s, NOW(), NOW()
                    WHERE NOT EXISTS (SELECT 1 FROM products_seller WHERE company_name = %s)
                """, ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω —Å —à–∏—Ä–æ–∫–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º", 5.0, True, 4.5, 0, 0.0, "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"])
                
                cursor.execute("SELECT id FROM products_seller WHERE company_name = %s", ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω"])
                seller_id = cursor.fetchone()[0]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                name = product_data['name']
                price = product_data['price']
                description = product_data['description']
                sku = f"PROD-{fake.unique.random_number(digits=6)}"
                
                cursor.execute("""
                    INSERT INTO products_product (category_id, seller_id, currency, price, sku, stock_quantity, is_active, rating, reviews_count, views_count, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                    RETURNING id
                """, [category_id, seller_id, 'RUB', price, sku, random.randint(5, 100), True, round(random.uniform(4.0, 5.0), 2), random.randint(0, 50), random.randint(20, 300)])
                
                product_id = cursor.fetchone()[0]
                
                cursor.execute("""
                    INSERT INTO products_product_translation (master_id, language_code, name, description)
                    VALUES (%s, %s, %s, %s)
                """, [product_id, 'ru', name, description])
                
                saved_count += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {name} - {price} ‚ÇΩ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        
        print(f"\nüéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    products = get_real_products_from_api()
    
    if products:
        save_to_db(products)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")

if __name__ == '__main__':
    main()

