#!/usr/bin/env python
"""
Script to create test products for the main page
"""
import os
import sys
import django
from django.core.files.base import ContentFile
import random

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from products.models import Product, Category, ProductImage, Tag
from django.contrib.auth import get_user_model

User = get_user_model()

def create_test_products():
    """Create test products for the main page"""
    
    print("Creating test products...")
    
    # Create a test seller if none exists
    try:
        seller_user = User.objects.get(username='test_seller')
    except User.DoesNotExist:
        seller_user = User.objects.create_user(
            username='test_seller',
            email='seller@test.com',
            password='testpass123',
            role='seller'
        )
    
    # Create or get seller profile
    from products.models import Seller
    try:
        seller = Seller.objects.get(user=seller_user)
    except Seller.DoesNotExist:
        seller = Seller.objects.create(
            user=seller_user,
            company_name='Test Seller Company',
            description='Test seller for demo products',
            commission_rate=5.00
        )
    
    # Create categories if they don't exist
    categories_data = [
        {'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', 'slug': 'smartfony'},
        {'name': '–ù–æ—É—Ç–±—É–∫–∏', 'slug': 'noutbuki'},
        {'name': '–ß–∞—Å—ã', 'slug': 'chasy'},
        {'name': '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', 'slug': 'krasota-i-zdorove'},
        {'name': '–û–¥–µ–∂–¥–∞', 'slug': 'odezhda'},
        {'name': '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', 'slug': 'detskie-tovary'},
        {'name': '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', 'slug': 'bytovaya-tehnika'},
        {'name': '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', 'slug': 'sport-i-otdyh'},
    ]
    
    categories = []
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            slug=cat_data['slug'],
            defaults={
                'name': cat_data['name'],
                'is_active': True
            }
        )
        categories.append(category)
        if created:
            print(f"Created category: {category.name}")
    
    # Create tags
    tags_data = ['–ù–æ–≤–∏–Ω–∫–∞', '–•–∏—Ç –ø—Ä–æ–¥–∞–∂', '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '–ü—Ä–µ–º–∏—É–º']
    tags = []
    for tag_name in tags_data:
        tag, created = Tag.objects.get_or_create(
            name=tag_name,
            defaults={
                'color': '#007bff'
            }
        )
        tags.append(tag)
    
    # Create test products
    products_data = [
        {
            'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 15 Pro',
            'description': '–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A17 Pro, —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π.',
            'price': 99990.00,
            'discount_price': 89990.00,
            'category': categories[0],  # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã
            'stock_quantity': 25,
            'rating': 4.8
        },
        {
            'name': '–ù–æ—É—Ç–±—É–∫ Dell XPS 13',
            'description': '–£–ª—å—Ç—Ä–∞–±—É–∫ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Intel Core 11-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —ç–∫—Ä–∞–Ω–æ–º InfinityEdge –∏ –¥–æ 16 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã.',
            'price': 129990.00,
            'discount_price': 119990.00,
            'category': categories[1],  # –ù–æ—É—Ç–±—É–∫–∏
            'stock_quantity': 15,
            'rating': 4.7
        },
        {
            'name': '–ß–∞—Å—ã Rolex Submariner',
            'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –≤–æ–¥–æ–ª–∞–∑–Ω—ã–µ —á–∞—Å—ã Rolex —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å—é –¥–æ 300 –º–µ—Ç—Ä–æ–≤.',
            'price': 899000.00,
            'category': categories[2],  # –ß–∞—Å—ã
            'stock_quantity': 5,
            'rating': 5.0
        },
        {
            'name': '–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ La Mer',
            'description': '–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π —É–≤–ª–∞–∂–Ω—è–µ—Ç –∫–æ–∂—É –¥–æ 24 —á–∞—Å–æ–≤ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∞—Ä–µ–Ω–∏—è.',
            'price': 24500.00,
            'discount_price': 19900.00,
            'category': categories[3],  # –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
            'stock_quantity': 50,
            'rating': 4.9
        },
        {
            'name': '–ö—É—Ä—Ç–∫–∞ –º—É–∂—Å–∫–∞—è –∑–∏–º–Ω—è—è',
            'description': '–£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –º—É–∂—Å–∫–∞—è –∫—É—Ä—Ç–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–µ–ø–æ–Ω–µ, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è, —Å –∫–∞–ø—é—à–æ–Ω–æ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–∞—Ä–º–∞–Ω–æ–≤.',
            'price': 8990.00,
            'category': categories[4],  # –û–¥–µ–∂–¥–∞
            'stock_quantity': 30,
            'rating': 4.5
        },
        {
            'name': '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä LEGO Technic',
            'description': '–î–µ—Ç—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å 1000 –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –º–æ–¥–µ–ª–∏ –≥–æ–Ω–æ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.',
            'price': 12990.00,
            'discount_price': 9990.00,
            'category': categories[5],  # –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
            'stock_quantity': 40,
            'rating': 4.6
        },
        {
            'name': '–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å Xiaomi',
            'description': '–£–º–Ω—ã–π —Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å —Å –ª–∞–∑–µ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –º–æ—â–Ω–æ–π suction –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
            'price': 24990.00,
            'category': categories[6],  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
            'stock_quantity': 20,
            'rating': 4.4
        },
        {
            'name': '–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä NordicTrack',
            'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä —Å 22-–¥—é–π–º–æ–≤—ã–º —ç–∫—Ä–∞–Ω–æ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ 24 —É—Ä–æ–≤–Ω—è–º–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.',
            'price': 69990.00,
            'discount_price': 59990.00,
            'category': categories[7],  # –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö
            'stock_quantity': 8,
            'rating': 4.7
        },
        {
            'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S24 Ultra',
            'description': '–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Samsung —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Snapdragon 8 Gen 3, –∫–∞–º–µ—Ä–æ–π 200 –ú–ü –∏ —Å—Ç–∏–ª—É—Å–æ–º S Pen.',
            'price': 119990.00,
            'category': categories[0],  # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã
            'stock_quantity': 18,
            'rating': 4.9
        },
        {
            'name': '–ù–æ—É—Ç–±—É–∫ MacBook Pro 16"',
            'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ Apple —Å —á–∏–ø–æ–º M3 Pro, —ç–∫—Ä–∞–Ω–æ–º Liquid Retina XDR –∏ –¥–æ 22 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã.',
            'price': 299990.00,
            'discount_price': 279990.00,
            'category': categories[1],  # –ù–æ—É—Ç–±—É–∫–∏
            'stock_quantity': 10,
            'rating': 4.9
        },
        {
            'name': '–ß–∞—Å—ã Casio G-Shock',
            'description': '–ü—Ä–æ—á–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —á–∞—Å—ã Casio —Å —É–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–º –∫–æ—Ä–ø—É—Å–æ–º, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å—é –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π.',
            'price': 9990.00,
            'category': categories[2],  # –ß–∞—Å—ã
            'stock_quantity': 100,
            'rating': 4.6
        },
        {
            'name': '–ú–∞—Å—Å–∞–∂–Ω–∞—è –∫—É—à–µ—Ç–∫–∞ BeautyFit',
            'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞–∂–Ω–∞—è –∫—É—à–µ—Ç–∫–∞ –¥–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã —Å —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–π –≤—ã—Å–æ—Ç–æ–π –∏ –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º.',
            'price': 34990.00,
            'category': categories[3],  # –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
            'stock_quantity': 12,
            'rating': 4.3
        }
    ]
    
    # Create products
    for i, product_data in enumerate(products_data):
        product = Product.objects.create(
            name=product_data['name'],
            description=product_data['description'],
            price=product_data['price'],
            discount_price=product_data.get('discount_price'),
            category=product_data['category'],
            seller=seller,
            stock_quantity=product_data['stock_quantity'],
            rating=product_data['rating'],
            is_active=True,
            views_count=random.randint(50, 500),
            reviews_count=random.randint(5, 50)
        )
        
        # Add random tags
        if random.choice([True, False]):
            product.tags.add(random.choice(tags))
        if random.choice([True, False]):
            product.tags.add(random.choice(tags))
        
        # Create a simple product image
        image_content = create_simple_product_image(product_data['name'])
        image = ProductImage.objects.create(
            product=product,
            alt_text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {product_data['name']}"
        )
        image.image.save(f'product_{i+1}.png', ContentFile(image_content))
        image.save()
        
        print(f"Created product: {product.name}")
    
    print(f"\n‚úÖ Created {Product.objects.filter(is_active=True).count()} active products")
    print("üéâ Products created successfully!")

def create_simple_product_image(product_name):
    """Create a simple colored image for product"""
    import io
    from PIL import Image, ImageDraw, ImageFont
    
    # Create image
    width, height = 300, 300
    image = Image.new('RGB', (width, height), color=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)))
    draw = ImageDraw.Draw(image)
    
    # Try to use a font, fallback to default if not available
    try:
        font = ImageFont.truetype("arial.ttf", 16)
    except:
        font = ImageFont.load_default()
    
    # Draw text
    draw.text((10, 10), product_name[:20], fill=(255, 255, 255), font=font)
    
    # Save to bytes
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    return img_byte_arr.getvalue()

if __name__ == "__main__":
    create_test_products()