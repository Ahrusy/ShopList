#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""
import os
import sys
import django
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('check_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shoplist.settings')
django.setup()

from products.models import Category, Product, ProductCharacteristic, ProductImage, Seller

def check_database_stats():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_products = Product.objects.count()
    total_categories = Category.objects.count()
    total_characteristics = ProductCharacteristic.objects.count()
    total_images = ProductImage.objects.count()
    total_sellers = Seller.objects.count()
    
    logger.info(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {total_products}")
    logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
    logger.info(f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {total_characteristics}")
    logger.info(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    logger.info(f"üìä –ü—Ä–æ–¥–∞–≤—Ü–æ–≤: {total_sellers}")
    
    return total_products, total_categories, total_characteristics, total_images

def check_categories_hierarchy():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info("\n=== –ò–ï–†–ê–†–•–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ===")
    
    # –ö–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    root_categories = Category.objects.filter(parent__isnull=True)
    logger.info(f"üå≥ –ö–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {root_categories.count()}")
    
    for root in root_categories:
        logger.info(f"  üìÅ {root.name}")
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        sub_categories = root.children.all()
        for sub in sub_categories:
            logger.info(f"    üìÇ {sub.name}")
            
            # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3-–≥–æ —É—Ä–æ–≤–Ω—è
            sub_sub_categories = sub.children.all()
            for sub_sub in sub_sub_categories:
                logger.info(f"      üìÑ {sub_sub.name}")

def check_products_by_category():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    logger.info("\n=== –¢–û–í–ê–†–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===")
    
    categories = Category.objects.filter(level=2)  # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
    
    for category in categories:
        products_count = Product.objects.filter(category=category).count()
        logger.info(f"üì¶ {category.name}: {products_count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        products = Product.objects.filter(category=category)[:3]
        for product in products:
            logger.info(f"    - {product.name} ({product.price}‚ÇΩ)")

def check_product_details():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    logger.info("\n=== –î–ï–¢–ê–õ–ò –¢–û–í–ê–†–û–í ===")
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    products = Product.objects.all()[:5]
    
    for product in products:
        logger.info(f"\nüõçÔ∏è –¢–æ–≤–∞—Ä: {product.name}")
        logger.info(f"   üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ")
        logger.info(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description[:100]}...")
        logger.info(f"   üìä –†–µ–π—Ç–∏–Ω–≥: {product.rating}")
        logger.info(f"   üìà –û—Ç–∑—ã–≤–æ–≤: {product.reviews_count}")
        logger.info(f"   üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ: {product.stock_quantity}")
        logger.info(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}")
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        characteristics = product.characteristics.all()[:3]
        if characteristics:
            logger.info("   üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
            for char in characteristics:
                logger.info(f"      - {char.name}: {char.value}")
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = product.images.all()
        logger.info(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.count()}")

def check_database_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("\n=== –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ë–î ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    products_without_category = Product.objects.filter(category__isnull=True).count()
    if products_without_category > 0:
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {products_without_category}")
    else:
        logger.info("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    products_without_images = Product.objects.filter(images__isnull=True).count()
    if products_without_images > 0:
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}")
    else:
        logger.info("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    products_without_characteristics = Product.objects.filter(characteristics__isnull=True).count()
    if products_without_characteristics > 0:
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {products_without_characteristics}")
    else:
        logger.info("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
    products_with_zero_price = Product.objects.filter(price=0).count()
    if products_with_zero_price > 0:
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π: {products_with_zero_price}")
    else:
        logger.info("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ü–µ–Ω—É")

def main():
    logger.info("=== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–ê–†–°–ò–ù–ì–ê ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_products, total_categories, total_characteristics, total_images = check_database_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        check_categories_hierarchy()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        check_products_by_category()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
        check_product_details()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        check_database_health()
        
        logger.info("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        if total_products >= 500:
            logger.info("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–æ 500+ —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 500")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
